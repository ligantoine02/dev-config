#
# NOTE : Default custom KAHUZI theme
# AUTHOR : @ligantoine02
# EMAIL : dev.erulabs@gmail.com, ir.antoineglorieux@gmail.com 
#



# GENERAL ==============================

warning = { fg = "orange" } # Editor warnings.
error = { fg = "crimson" } # Editor errors, like mis-typing a command.
info = { fg = "cyan" } # Contextual info in diagnostic messages (LSP).
hint = { bg = "black", fg = "white" } # Code diagnostics hints (LSP).
diagnostic = { } # Code diagnostics in editing area (LSP).
"diagnostic.error" = { "underline" = { style = "curl",  color = "crimson" } }
"diagnostic.warning" = { "undeline" = { style = "curl", color = "orange" } }
"diagnostic.info" = { "underline" = { style = "curl", color = "cyan" } }
"diagnostic.hint" = { "underline" = { style = "curl", color = "cyan-light" } }

# UI ==============================
# For styling helix itself.

'ui.background' = { fg = "foreground", bg = "background" } # Default background color.
'ui.window' = { fg = "crimson" } # Window border between splits.
'ui.gutter' = { } # Left gutter for diagnostics and breakpoints.

'ui.text' = { fg = "slate-dark" } # Default text color.
'ui.text.focus' = { } # Selection highlight in buffer-picker or file-picker.
'ui.text.info' = { } # Info popup contents (space mode menu).

'ui.cursor' = { modifiers = ["reversed"] } # Fallback cursor colour, non-primary cursors when there are multiple (shift-c).
'ui.cursor.primary' = { modifiers = ["reversed"] } # The primary cursor when there are multiple (shift-c).
'ui.cursor.insert' = { } # The cursor in insert mode (i).
'ui.cursor.select' = { } # The cursor in select mode (v).
'ui.cursor.match' = { fg = "ruby", modifiers = ["bold"] } # The matching parentheses of that under the cursor.

'ui.selection' = { bg = "slate-bg" } # All currently selected text.
'ui.selection.primary' = { bg = "slate-bg" } # The primary selection when there are multiple.

'ui.linenr' = { fg = "slate-dark" } # Line numbers.
'ui.linenr.selected' = { fg = "blue-text", modifiers = ["italic", "bold", "dim"] } # Current line number.

'ui.virtual' = { fg = "slate-dark" } # Namespace for additions to the editing area.
'ui.virtual.ruler' = { fg ="slate-dark" } # Vertical rulers (colored columns in editing area).
'ui.virtual.whitespace' = { fg = "slate-dark" } # Whitespace markers in editing area.

'ui.statusline' = { fg = "foreground" } # Status line.
'ui.statusline.inactive' = { } # Status line in unfocused windows.
"ui.statusline.normal" = { fg = "black", bg = "blue" } # Statusline mode during normal mode (only if editor.color-modes is enabled)
"ui.statusline.insert" = { fg = "black", bg = "ruby" } # Statusline mode during insert mode (only if editor.color-modes is enabled)
"ui.statusline.select" = { } # Statusline mode during select mode (only if editor.color-modes is enabled)

'ui.help' = { } # `:command` descriptions above the command line.

'ui.highlight' = { } # selected contents of symbol pickers (spc-s, spc-S) and current line in buffer picker (spc-b).

'ui.menu' = { } # Autocomplete menu.
'ui.menu.selected' = { } # Selected autocomplete item.

'ui.popup' = { } # Documentation popups (space-k).
'ui.popup.info' = { } # Info popups box (space mode menu).


# SYNTAX HIGHLIGHTING ==============================
# All the keys here are Treesitter scopes.

'property' = { fg = "jade" } # Regex group names.
'special' = { fg = "crimson" } # Special symbols e.g `?` in Rust, `...` in Hare.
'attribute' = { fg = "jade", modifiers = ["italic"] } # Class attributes, html tag attributes.

'type' = { fg = "cyan-light" } # Variable type, like integer or string, including program defined classes, structs etc..
'type.builtin' = { fg = "cyan-light" } # Primitive types of the language (string, int, float).
'type.enum.variant' = { fg = "cyan-light", modifiers = ["italic"] } # A variant of an enum.

'constructor' = { } # Constructor method for a class or struct.

'constant' = { fg = "ruby", modifiers = ["bold"] } # Constant value
'constant.builtin' = { fg = "ruby" } # Special constants like `true`, `false`, `none`, etc.
'constant.builtin.boolean' = { fg = "ruby", modifiers = ["italic"] } # True or False.
'constant.character' = { } # Constant of character type.
'constant.character.escape' = { fg = "ruby" } # escape codes like \n.
'constant.numeric'  = { } # constant integer or float value.
'constant.numeric.integer' = { } # constant integer value.
'constant.numeric.float' = { } # constant float value.

'string' = { fg = "slate-text" } # String literal.
'string.regexp' = { } # Regular expression literal.
'string.special' = { } # Strings containing a path, URL, etc.
'string.special.path' = { } # String containing a file path.
'string.special.url' = { } # String containing a web URL.
'string.special.symbol' = { } # Erlang/Elixir atoms, Ruby symbols, Clojure keywords.

'comment' = { fg = "slate-dark", modifiers = ["italic"] } # This is a comment.
'comment.line' = { } # Line comments, like this.
'comment.block' = { } # Block comments, like /* this */ in some languages.
'comment.block.documentation' = { } # Doc comments, e.g '///' in rust.

'variable' = { fg = "cyan-light" } # Variable names.
'variable.builtin' = { fg = "cyan-light", modifiers = ["italic"] } # Language reserved variables: `this`, `self`, `super`, etc.
'variable.parameter' = { fg = "blue-text" } # Function parameters.
'variable.other.member' = { fg = "blue-text", modifiers = ["italic"] } # Fields of composite data types (e.g. structs, unions).

'label' = { } # Loop labels, among other things.

'punctuation' = { fg = "slate-text" } # Any punctuation symbol.
'punctuation.delimiter' = { } # Commas, colons or other delimiter depending on the language.
'punctuation.bracket' = { } # Parentheses, angle brackets, etc.

'keyword' = { fg = "jade" } # Language reserved keywords.
'keyword.control' = { fg = "jade" } # Control keywords.
'keyword.control.conditional' = { fg = "jade", modifiers = ["italic"] } # `if`, `else`, `elif`.
'keyword.control.repeat' = { fg = "jade", modifiers = ["italic"] } # `for`, `while`, `loop`.
'keyword.control.import' = { fg = "jade", modifiers = ["italic"] } # `import`, `export` `use`.
'keyword.control.return' = { fg = "mint", modifiers = ["italic"] } # `return` in most languages.
'keyword.control.exception' = { fg = "mint", modifiers = ["italic"] } # `try`, `catch`, `raise`/`throw` and related.
'keyword.operator' = { fg = "mint" } # `or`, `and`, `in`.
'keyword.directive' = { fg = "jade" } # Preprocessor directives (#if in C...).
'keyword.function' = { fg = "jade" } # The keyword to define a function: 'def', 'fun', 'fn'.

'operator' = { fg = "mint" } # Logical, mathematical, and other operators.

'function' = { fg = "blue-text", modifiers = ["italic"] }
'function.builtin' = { fg = "blue-text" }
'function.method' = { fg = "blue-text" } # Class / Struct methods.
'function.macro' = { }
'function.special' = { } # Preprocessor function in C.

'tag' = { fg = "blue-text" } # As in <body> for html, css tags.
'tag.error' = { fg = "crimson", modifiers = ["italic"] } # Erroneous closing html tags.

'namespace' = { fg = "cyan-light" } # Namespace or module identifier.


# Markup ==============================
# Colors for markup languages, like Markdown or XML.

'markup.heading.1' = { } # Markdown heading 1 color.
'markup.heading.2' = { } # Markdown heading 2 color.
'markup.heading.3' = { } # Markdown heading 3 color.
'markup.heading.4' = { } # Markdown heading 4 color.
'markup.heading.5' = { } # Markdown heading 5 color.
'markup.heading.6' = { } # Markdown heading 6 color.
'markup.heading.marker' = { } # Hashtag color on Markdown headings.

'markup.list' = { }
'markup.list.numbered' = { } # Numbered list.
'markup.list.unnumbered' = { } # Bullet point list.

'markup.bold' = { } # Bold text.
'markup.italic' = { } # Italicised text.

'markup.link' = { }
'markup.link.url' = { } # Urls pointed to by links.
'markup.link.label' = { } # Non-URL link references.
'markup.link.text' = { } # URL and image descriptions in links.

'markup.quote' = { } # `> Quotes` in Markdown.


# Markup - Interface ==============================
# "These scopes are used for theming the editor interface."

'markup.normal' = { }
'markup.normal.completion' = { } # For completion doc popup ui.
'markup.normal.raw' = { } # For hover popup ui.

'markup.heading.completion' = { } # Headings for completion doc popup ui.
'markup.heading.raw' = { } # Headings for hover popup ui.

'markup.raw' = { } # Code block in Markdown.
'markup.raw.block' = { } # Multiline (```) codeblock in Markdown.
'markup.raw.inline' = { } # `Inline code block` in Markdown.
'markup.raw.inline.completion' = { } # ?
'markup.raw.inline.hover' = { } # ?

# Diff ==============================
# Version control changes.

'diff.plus' = { } # Additions.
'diff.minus' = { } # Deletions.
'diff.delta' = { } # Modifications.
'diff.delta.moved' = { } # Renamed or moved files.


[palette] # Define your custom colors here.
white = '#EEEEEE'
black = "#191919"
slate = "#18191B"
slate-bg = "#363A3F"
slate-text = "#B0B4BA"
slate-dark ="#5A6169"
foreground = "#EDEEF0"
background = "#101B20"
blue = "#111927"
blue-text = "#70B8FF"
crimson = "#E93D82"
mint = "#58D5BA"
orange = "#F76B15"
orange-text = "#FFA057"
cyan = "#11809C"
sky = "#7CE2FE"
cyan-light = "#4CCCE6"
jade = "#27B08B"
ruby = "#E54666"
bronze = "#A18072"
brown = "#AD7F58"
